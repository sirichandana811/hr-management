// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole?
  department    String?
  employeeId    String?   @unique
  phoneNumber   String?
  address       String?
  dateOfJoining DateTime?
  salary        Float?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  maxCL         Int       @default(20) // Max Casual Leaves per year
  usedCL        Int       @default(0) // Casual Leaves used

  maxSL  Int @default(20) // Max Sick Leaves per year
  usedSL Int @default(0) // Sick Leaves used

  maxPL           Int             @default(20) // Max Paid Leaves per year
  usedPL          Int             @default(0) // Paid Leaves used
  accounts        Account[]
  sessions        Session[]
  leave           leave[]
  holiday         Holiday[]
  // Role-specific relations
  createdCourses  Course[]        @relation("CourseCreator")
  assignedCourses Course[]        @relation("CourseTeacher")
  supportTickets  SupportTicket[]

}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
model Benefit {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  type        String   // e.g., "Health Insurance", "Travel Allowance"
  amount      Float
  status      String   @default("ACTIVE") // ACTIVE / INACTIVE
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])
}

model Course {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  subject     String
  grade       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isActive    Boolean  @default(true)

  creatorId String @db.ObjectId
  creator   User   @relation("CourseCreator", fields: [creatorId], references: [id])

  teacherId String? @db.ObjectId
  teacher   User?   @relation("CourseTeacher", fields: [teacherId], references: [id])
}

model SupportTicket {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  status      TicketStatus   @default(OPEN)
  priority    TicketPriority @default(MEDIUM)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
}

enum UserRole {
  ADMIN
  HR
  TEACHER
  CONTENT_CREATOR
  SUPPORT_STAFF
  EMPLOYEE
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model leave {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  user      User        @relation(fields: [userId], references: [id])
  userId    String      @db.ObjectId
  type      String
  status    LeaveStatus @default(PENDING)
  startDate DateTime
  endDate   DateTime
  reason    String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

model Holiday {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  date        DateTime
  createdById String   @db.ObjectId
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
