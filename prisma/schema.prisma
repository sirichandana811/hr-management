// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?
  
  password      String?
  role          UserRole?
  department    String?
  employeeId    String?   @unique
  phoneNumber   String?
  address       String?
  dateOfJoining DateTime?
  skills        String[]
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  feedback       Feedback[]             
  accounts          Account[]
  sessions          Session[]
 
  holiday           Holiday[]

  supportTickets    SupportTicket[]
            
 
  teachingLogs      TeachingLog[]       @relation("UserTeachingLogs")
  teacherAttendance TeacherAttendance[] @relation("UserTeacherAttendance")

  markedAttendances TeacherAttendance[] @relation("AttendanceMarkedBy")
  leaveRequests     LeaveRequest[]
  leaveBalances     LeaveBalance[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SupportTicket {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  status      TicketStatus   @default(OPEN)
  priority    TicketPriority @default(MEDIUM)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  sharedToAdmin Boolean @default(false)
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  HR
  TEACHER
  EMPLOYEE
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Holiday {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  date        DateTime
  createdById String   @db.ObjectId
  createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}




model TeachingLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  teacherId String   @db.ObjectId
  teacher   User     @relation("UserTeachingLogs", fields: [teacherId], references: [id], onDelete: Cascade)

  className   String
  subject     String
  topic       String
  description String?

  date        DateTime
  startTime   DateTime?
  endTime     DateTime?

  year        String?   // 1st, 2nd, 3rd, 4th year
  college     String?   // College name
  branch      String?   // e.g., CSE, ECE

  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
}


model TeacherAttendance {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime
  forenoon  String
  afternoon String
  role      UserRole?
  teacher   User   @relation("UserTeacherAttendance", fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId String @db.ObjectId

  markedBy   User?   @relation("AttendanceMarkedBy", fields: [markedById], references: [id], onDelete: Cascade)
  markedById String? @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([teacherId, date], name: "teacherId_date")
}

model LeaveType {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  limit     Int
  description String? 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  balances  LeaveBalance[]
  requests  LeaveRequest[]
}

model LeaveBalance {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String
  leaveTypeId   String
  leaveTypeName String
  used          Int      @default(0)
  remaining     Int

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  leaveType   LeaveType @relation(fields: [leaveTypeId], references: [id], onDelete: Cascade)
}

model LeaveRequest {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  userId        String
  leaveTypeId   String
  leaveTypeName String
  startDate     DateTime
  endDate       DateTime
  days          Int
  reason        String?
  status        LeaveStatus @default(PENDING)
  role          UserRole?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  leaveType   LeaveType @relation(fields: [leaveTypeId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}
model Feedback {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  empName   String
  empId     String
  college   String
  dept      String
  studentId String?
  rating    Int
  remarks   String
  createdAt DateTime @default(now())
  visibleToTeacher Boolean @default(false)
  // Relation
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}